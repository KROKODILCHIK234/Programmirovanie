import numpy as np
import time
from numba import jit
import random

# Константы игры
EMPTY = 0
PLAYER_X = 1
PLAYER_O = 2
WIN_LENGTH = 5
BOARD_SIZE = 20
TIME_LIMIT = 20  # Ограничение времени на ход
SEARCH_DEPTH = 7  # Фиксированная глубина поиска

# Веса для оценки позиций
FIVE_IN_ROW = 1000000
OPEN_FOUR = 50000
HALF_OPEN_FOUR = 10000
OPEN_THREE = 5000
HALF_OPEN_THREE = 1000
OPEN_TWO = 100
HALF_OPEN_TWO = 50

@jit(nopython=True)
def check_win_direction(board, x, y, dx, dy, player, win_length):
    """Проверка победы в одном направлении."""
    count = 0
    for k in range(win_length):
        nx, ny = x + k * dx, y + k * dy
        if 0 <= nx < board.shape[0] and 0 <= ny < board.shape[1] and board[nx, ny] == player:
            count += 1
        else:
            break
    return count == win_length

@jit(nopython=True)
def check_win_numba(board, player, win_length):
    """Оптимизированная проверка победы."""
    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]
    for x in range(board.shape[0]):
        for y in range(board.shape[1]):
            if board[x, y] == player:
                for dx, dy in directions:
                    if check_win_direction(board, x, y, dx, dy, player, win_length):
                        return True
    return False

@jit(nopython=True)
def evaluate_position(board, x, y, player):
    """Улучшенная оценка позиции для конкретной точки."""
    score = 0
    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]
    
    for dx, dy in directions:
        count = 1
        blocks = 0
        empty_before = 0
        empty_after = 0
        
        # Проверка в прямом направлении
        for k in range(1, 6):
            nx, ny = x + k * dx, y + k * dy
            if not (0 <= nx < board.shape[0] and 0 <= ny < board.shape[1]):
                blocks += 1
                break
            if board[nx, ny] == player:
                count += 1
            elif board[nx, ny] == EMPTY:
                empty_after = 1
                break
            else:
                blocks += 1
                break
                
        # Проверка в обратном направлении
        for k in range(1, 6):
            nx, ny = x - k * dx, y - k * dy
            if not (0 <= nx < board.shape[0] and 0 <= ny < board.shape[1]):
                blocks += 1
                break
            if board[nx, ny] == player:
                count += 1
            elif board[nx, ny] == EMPTY:
                empty_before = 1
                break
            else:
                blocks += 1
                break

        # Улучшенная оценка последовательности
        if count >= 5:
            score += FIVE_IN_ROW
        elif count == 4:
            if empty_before and empty_after:
                score += OPEN_FOUR
            elif empty_before or empty_after:
                score += HALF_OPEN_FOUR
        elif count == 3:
            if empty_before and empty_after:
                score += OPEN_THREE
            elif empty_before or empty_after:
                score += HALF_OPEN_THREE
        elif count == 2:
            if empty_before and empty_after:
                score += OPEN_TWO
            elif empty_before or empty_after:
                score += HALF_OPEN_TWO

        center_x = board.shape[0] // 2
        center_y = board.shape[1] // 2
        distance_from_center = abs(x - center_x) + abs(y - center_y)
        score += (20 - distance_from_center) * 10

    return score

class Game:
    def __init__(self):
        self.board = np.zeros((BOARD_SIZE, BOARD_SIZE), dtype=np.int32)
        self.current_player = self.choose_first_player()
        self.move_history = []
        self.last_move = None
        self.transposition_table = {}
        self.killer_moves = set()  # Добавляем список "убийственных ходов"

    def choose_first_player(self):
        choice = input("Хотите ли вы начать первым? (y/n): ").strip().lower()
        if choice == 'y':
            return PLAYER_X
        elif choice == 'n':
            return PLAYER_O
        else:
            print("Выбор не распознан. Игроки будут выбраны случайным образом.")
            return random.choice([PLAYER_X, PLAYER_O])

    def print_board(self):
        column_numbers = "    " + " ".join(f"{i:2}" for i in range(BOARD_SIZE))
        print(column_numbers)
        print("   " + "-" * (3 * BOARD_SIZE - 1))
        
        for i, row in enumerate(self.board):
            row_string = f"{i:2} | " + "  ".join(
                ["." if cell == EMPTY else "X" if cell == PLAYER_X else "O" for cell in row]
            )
            print(row_string)

    def make_move(self, x, y):
        if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE and self.board[x, y] == EMPTY:
            self.board[x, y] = self.current_player
            self.last_move = (x, y)
            self.move_history.append((x, y))
            return True
        return False

    def undo_move(self, x, y):
        self.board[x, y] = EMPTY
        self.move_history.pop()
        self.last_move = self.move_history[-1] if self.move_history else None

    def switch_player(self):
        self.current_player = PLAYER_X if self.current_player == PLAYER_O else PLAYER_O

    def check_win(self, player):
        return check_win_numba(self.board, player, WIN_LENGTH)

    def is_draw(self):
        return not np.any(self.board == EMPTY)

    def get_possible_moves(self):
        """Оптимизированный поиск возможных ходов с кэшированием оценок."""
        if not self.last_move:  # Первый ход - центр доски
            return [(BOARD_SIZE // 2, BOARD_SIZE // 2)]

        moves = []
        x_min = max(0, min(x for x, _ in self.move_history) - 2)
        x_max = min(BOARD_SIZE, max(x for x, _ in self.move_history) + 3)
        y_min = max(0, min(y for _, y in self.move_history) - 2)
        y_max = min(BOARD_SIZE, max(y for _, y in self.move_history) + 3)

        # Кэшируем оценки для быстрой сортировки
        move_scores = {}

        # Сначала проверяем убийственные ходы
        for move in self.killer_moves:
            x, y = move
            if (x_min <= x < x_max and y_min <= y < y_max and 
                self.board[x, y] == EMPTY and self.has_neighbor(x, y)):
                score = self.move_priority(x, y)
                move_scores[(x, y)] = score
                moves.append((x, y))

        # Добавляем остальные ходы с предварительной оценкой
        for x in range(x_min, x_max):
            for y in range(y_min, y_max):
                if (x, y) not in move_scores and self.board[x, y] == EMPTY:
                    # Быстрая предварительная оценка соседей
                    neighbors_count = 0
                    for dx in [-1, 0, 1]:
                        for dy in [-1, 0, 1]:
                            if dx == 0 and dy == 0:
                                continue
                            nx, ny = x + dx, y + dy
                            if (0 <= nx < BOARD_SIZE and 
                                0 <= ny < BOARD_SIZE and 
                                self.board[nx, ny] != EMPTY):
                                neighbors_count += 1
                    
                    if neighbors_count > 0:
                        score = self.move_priority(x, y)
                        move_scores[(x, y)] = score
                        moves.append((x, y))

        # Сортируем ходы по оценкам
        moves.sort(key=lambda move: move_scores[move], reverse=True)
        
        # Ограничиваем количество ходов для ускорения
        return moves[:15]  # Рассматриваем только топ-15 ходов

    def has_neighbor(self, x, y):
        """Улучшенная проверка наличия соседних камней."""
        for dx in [-2, -1, 0, 1, 2]:
            for dy in [-2, -1, 0, 1, 2]:
                if dx == 0 and dy == 0:
                    continue
                nx, ny = x + dx, y + dy
                if 0 <= nx < BOARD_SIZE and 0 <= ny < BOARD_SIZE:
                    if self.board[nx, ny] != EMPTY:
                        # Ближайшие соседи имеют больший вес
                        if abs(dx) <= 1 and abs(dy) <= 1:
                            return True
                        # Дальние соседи требуют дополнительного подтверждения
                        for dx2 in [-1, 0, 1]:
                            for dy2 in [-1, 0, 1]:
                                nx2, ny2 = x + dx2, y + dy2
                                if (0 <= nx2 < BOARD_SIZE and 
                                    0 <= ny2 < BOARD_SIZE and 
                                    self.board[nx2, ny2] != EMPTY):
                                    return True
        return False

    def move_priority(self, x, y):
        """Улучшенная приоритизация ходов."""
        # Проверяем выигрышный ход для обоих игроков
        for player in [PLAYER_O, PLAYER_X]:
            self.board[x, y] = player
            if self.check_win(player):
                self.board[x, y] = EMPTY
                # Добавляем ход в убийственные
                self.killer_moves.add((x, y))
                return float('inf') if player == PLAYER_O else float('inf') - 1
            self.board[x, y] = EMPTY

        # Оцениваем позицию с учетом обоих игроков
        score_o = evaluate_position(self.board, x, y, PLAYER_O)
        score_x = evaluate_position(self.board, x, y, PLAYER_X)
        
        # Добавляем небольшой случайный фактор для разнообразия игры
        random_factor = np.random.randint(1, 10)
        
        return score_o + score_x * 0.9 + random_factor

    def evaluate(self):
        """Улучшенная оценка текущего состояния доски."""
        if self.check_win(PLAYER_O):
            return 1_000_000
        if self.check_win(PLAYER_X):
            return -1_000_000
        
        total_score = 0
        for x in range(BOARD_SIZE):
            for y in range(BOARD_SIZE):
                if self.board[x, y] == PLAYER_O:
                    total_score += evaluate_position(self.board, x, y, PLAYER_O)
                elif self.board[x, y] == PLAYER_X:
                    total_score -= evaluate_position(self.board, x, y, PLAYER_X)
        
        return total_score

    def alpha_beta(self, depth, alpha, beta, maximizing):
        """Улучшенный алгоритм альфа-бета отсечений."""
        board_hash = hash(self.board.tobytes())
        
        # Проверка на выигрыш/проигрыш
        if self.check_win(PLAYER_O):
            return 1_000_000 + depth, None
        if self.check_win(PLAYER_X):
            return -1_000_000 - depth, None
        if self.is_draw():
            return 0, None
            
        if board_hash in self.transposition_table:
            cached_depth, cached_value, cached_move = self.transposition_table[board_hash]
            if cached_depth >= depth:
                return cached_value, cached_move

        if depth == 0:
            value = self.evaluate()
            self.transposition_table[board_hash] = (depth, value, None)
            return value, None

        possible_moves = self.get_possible_moves()
        if not possible_moves:
            return 0, None

        best_move = None
        if maximizing:
            max_eval = float("-inf")
            for move in possible_moves:
                x, y = move
                self.board[x, y] = PLAYER_O
                eval, _ = self.alpha_beta(depth - 1, alpha, beta, False)
                self.board[x, y] = EMPTY
                
                if eval > max_eval:
                    max_eval = eval
                    best_move = move
                alpha = max(alpha, eval)
                if beta <= alpha:
                    self.killer_moves.add(move)
                    break
            
            self.transposition_table[board_hash] = (depth, max_eval, best_move)
            return max_eval, best_move
        else:
            min_eval = float("inf")
            for move in possible_moves:
                x, y = move
                self.board[x, y] = PLAYER_X
                eval, _ = self.alpha_beta(depth - 1, alpha, beta, True)
                self.board[x, y] = EMPTY
                
                if eval < min_eval:
                    min_eval = eval
                    best_move = move
                beta = min(beta, eval)
                if beta <= alpha:
                    self.killer_moves.add(move)
                    break
            
            self.transposition_table[board_hash] = (depth, min_eval, best_move)
            return min_eval, best_move


    def make_best_move(self):
        """Улучшенный выбор хода с фиксированной глубиной 7."""
        start_time = time.time()
        
        # Предварительная сортировка ходов для ускорения поиска
        possible_moves = self.get_possible_moves()
        if not possible_moves:
            return None
            
        # Проверяем выигрышные ходы сразу
        for move in possible_moves[:5]:  # Проверяем топ-5 ходов
            x, y = move
            # Проверка на победный ход
            self.board[x, y] = PLAYER_O
            if self.check_win(PLAYER_O):
                self.board[x, y] = EMPTY
                return move
            self.board[x, y] = EMPTY
            
            # Проверка на блокирующий ход
            self.board[x, y] = PLAYER_X
            if self.check_win(PLAYER_X):
                self.board[x, y] = EMPTY
                return move
            self.board[x, y] = EMPTY

        # Основной поиск с альфа-бета отсечением
        _, best_move = self.alpha_beta(SEARCH_DEPTH, float("-inf"), float("inf"), True)
        
        # Если превысили лимит времени, берем лучший найденный ход
        if time.time() - start_time > TIME_LIMIT:
            print("Предупреждение: превышен лимит времени, использован лучший найденный ход")
            return best_move or possible_moves[0]
            
        return best_move or possible_moves[0]

def main():
    game = Game()
    print("Добро пожаловать в игру Гомоку!")
    print("Используйте координаты X Y для хода (например: 10 10)")
    print("Компьютер играет за O, вы играете за X")
    
    while True:
        game.print_board()
        if game.current_player == PLAYER_X:
            print("\nВаш ход (X). Введите координаты x y:")
            try:
                x, y = map(int, input().split())
            except ValueError:
                print("Ошибка! Введите два числа через пробел (например: 10 10)")
                continue
            if not game.make_move(x, y):
                print("Недопустимый ход! Клетка занята или находится вне доски.")
                continue
        else:
            print("\nХод компьютера (O)...")
            start_time = time.time()
            move = game.make_best_move()
            end_time = time.time()
            move_time = end_time - start_time
            
            if move is None:
                print("Ничья!")
                break
            x, y = move
            game.make_move(x, y)
            print(f"Компьютер сделал ход: {x} {y}")
            print(f"Время на ход: {move_time:.2f} секунд")

        if game.check_win(PLAYER_X):
            game.print_board()
            print("\nПоздравляем! Вы победили!")
            break
        elif game.check_win(PLAYER_O):
            game.print_board()
            print("\nКомпьютер победил!")
            break
        elif game.is_draw():
            game.print_board()
            print("\nНичья!")
            break

        game.switch_player()

if __name__ == "__main__":
    main()
